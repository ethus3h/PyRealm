packet = '~\xe1\xd0c\xa5\xc3\x15%}\xbc\xb9\xa8\x10\x9e{@\xf4\x193\x0b\xf3\xed.b]\x1c\x1b\xfb\xd8.\x12\x8c\xf6/\x8a\xc6P\xc0|#\xb0y\xa0is\xe1\xdd\x9f\xccm@\xac\xa1\x95\xd5o\xcc\xadn\xc1\x116\xa7\x08\xcc/\xe5#\xfaS\xbd\x04\x0e&\x9dRVP\x02\xee\\\xb5\xcb-)\x97\xca\xc8\x16HE`\xce\xacVP\xa0D\x00\x97z\xe0\xcb\xe9\xa2\x87\xdfM\xef=\xd7\x96"\x9cI\x94\x10_\x13\xc3\x94KD1\xb6\xfeV\xad\xcd\xf3_\xe9\xf1\xa3\xc0\xc8\'\x93\xe3p\r4H`\x9c\xa1\x1fK\xe7\'\xee4e1\xac\xcbw6\x9a\xa9\xcf\xc5E1\xa9\x05\xf8\\\xcf;7\x9a\x0ek@\xd64y\x8a\xcd\x05\x84P\x88#\x94\x13\xf5\xa3S\xbf\xf2Y\xfc\x8b\xd9\x1f\xaa\x82 \xc9\x97\x98\x01t\xd0\xa7\xc3f\x80\x9fo4b\xe8\xeb\xc4\xc3U\xdd\xa3\xf5\x04\xca\xedG\x146\xe6\x94K;\xea\xd4\\\xd3\xdf\x08Bz%h\xc5\xc8\xc9;\xa3|\x83`\x0b\x9d\x90\xaf\t\x91\r\xac\'\x1bA\xa6\xf8\xe7\xc3\'\x97PV\x93\x05\x96\xff\x97\xf7LE\x15\xcf^\x88A\x18G\x13\xe4\xe8\x19\x87\x960\x04\xaa\xb6\xefO\xf8@F:[\x13\xcc\x11\x12\x16s.X\xc3c%\xc0\x12\xbd\xaf\t\xa2O\xbcZ\x88\t\xf1\xc8\xa1<\xf64T\x1e\r\xecZ\x96\xd0\xadP\xac\xa2\x83\x98\xe4\xbf\x96\xb3\xf7Z\xd1~\xa7#\rc\x95\xe7m\x1cSl\xc2gBMt\xd9\x17\xe95}c\x86S\xd7\xabx\x9aT\x1a\x84\xcd\x0ei}\x87iL\x16J\x87*\xbba@\x82\t'

from Crypto.Cipher import ARC4

#Crypto.getCipher("rc4",_-vJ._-0xn("311f80691451c71d09a13a2a6e"));

class RC4():
    def __init__(self, bytez):
        self.a = []
        for i in range(0,256):
            self.a.append(i)
        self.b = 0
        self.c = 0
        i = 0
        j = 0
        for k in range(0,len(self.a)):
            j = (bytez[i] & 0xFF) + (self.a[k] & 0xFF) + j & 0xFF
            l = self.a[k]
            self.a[k] = self.a[j]
            self.a[j] = l
            i = (i+1) % len(bytez)

            
    def cipher(self, bytez):
        for i in range(0,len(bytez)):
            self.b = self.b + 1 & 0xFF
            self.c = (self.a[self.b] & 0xFF) + self.c & 0xFF
            j = self.a[self.b]
            self.a[self.b] = self.a[self.c]
            self.a[self.c] = j
            j = (self.a[self.b] & 0xFF) + (self.a[self.c] & 0xFF) & 0xFF
            bytez[i] = bytez[i] ^ self.a[j]
        return bytez
            
